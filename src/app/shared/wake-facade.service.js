"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var Application = require("tns-core-modules/application");
var System = java.lang.System;
var AlarmManager = android.app.AlarmManager;
var WakeFacadeService = /** @class */ (function () {
    function WakeFacadeService() {
        this.context = Application.android
            .context;
    }
    WakeFacadeService.prototype.wakeScreenByActivity = function () {
        if (!this.isOn) {
            this.wakeActivityIntent.setClassName(Application.android.context, 'com.tns.CustomWakingActivity');
            this.wakeActivityIntent.setFlags(android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP |
                android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
            this.context.startActivity(this.wakeActivityIntent);
            this.isOn = true;
        }
    };
    WakeFacadeService.prototype.setAlarm = function () {
        var am = Application.android.context.getSystemService(android.content.Context.ALARM_SERVICE);
        var intent = new android.content.Intent();
        var context = Application.android.context;
        var pendingIntent = android.app.PendingIntent.getActivity(context, 1, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT);
        am.setInexactRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis(), 5 * 60 * 1000, pendingIntent);
        console.log("Idzie intent Pending  :)" + am.getNextAlarmClock());
        this.wakeScreenByCall();
    };
    WakeFacadeService.prototype.cancelAlarm = function () {
        var am = Application.android.context.getSystemService(android.content.Context.ALARM_SERVICE);
        var intent = new android.content.Intent();
        var context = Application.android.context;
        var pendingIntent = android.app.PendingIntent.getActivity(context, 1, intent, android.app.PendingIntent.FLAG_UPDATE_CURRENT);
        am.cancel(pendingIntent);
        console.log("Wylaczony alarm");
        //this.snoozeScreenByCall();
    };
    WakeFacadeService.prototype.snoozeActivityScreen = function () {
        if (this.isOn) {
            this.wakeActivityIntent = new android.content.Intent();
            this.wakeActivityIntent.setClassName(Application.android.context, 'com.tns.CustomWakingActivity');
            this.wakeActivityIntent.setFlags(android.content.Intent.FLAG_ACTIVITY_SINGLE_TOP |
                android.content.Intent.FLAG_ACTIVITY_NEW_TASK);
            this.wakeActivityIntent.putExtra('finish', true);
            this.context.startActivity(this.wakeActivityIntent);
            this.isOn = false;
        }
        return Promise.resolve();
    };
    WakeFacadeService.prototype.wakeScreenByCall = function () {
        var powerManager = Application.android.context.getSystemService(android.content.Context.POWER_SERVICE);
        this.wakeLock = powerManager.newWakeLock(android.os.PowerManager.PARTIAL_WAKE_LOCK |
            android.os.PowerManager.ACQUIRE_CAUSES_WAKEUP |
            android.os.PowerManager.ON_AFTER_RELEASE, 'com.tns.wake-facade');
        this.wakeLock.acquire();
        var window = Application.android.foregroundActivity;
        console.log('udalo sie wlaczyc procesor');
    };
    WakeFacadeService.prototype.snoozeScreenByCall = function () {
        this.wakeLock.release();
    };
    WakeFacadeService = __decorate([
        core_1.Injectable({
            providedIn: 'root'
        })
    ], WakeFacadeService);
    return WakeFacadeService;
}());
exports.WakeFacadeService = WakeFacadeService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FrZS1mYWNhZGUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndha2UtZmFjYWRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsMERBQTREO0FBRTVELElBQU8sTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ2pDLElBQU8sWUFBWSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDO0FBSy9DO0lBSEE7UUFLbUIsWUFBTyxHQUFHLFdBQVcsQ0FBQyxPQUFPO2FBQzNDLE9BQWtDLENBQUM7SUF5RnhDLENBQUM7SUFwRkMsZ0RBQW9CLEdBQXBCO1FBQ0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDZCxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxDQUNsQyxXQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDM0IsOEJBQThCLENBQy9CLENBQUM7WUFDRixJQUFJLENBQUMsa0JBQWtCLENBQUMsUUFBUSxDQUM5QixPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyx3QkFBd0I7Z0JBQy9DLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHNCQUFzQixDQUM5QyxDQUFDO1lBQ0YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7WUFFcEQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7SUFDSCxDQUFDO0lBQ0Qsb0NBQVEsR0FBUjtRQUNFLElBQU0sRUFBRSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUNyRCxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQ1YsQ0FBQztRQUM5QixJQUFNLE1BQU0sR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDNUMsSUFB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QUFDO1FBQ3hCLElBQU0sTUFBTSxHQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUM7UUFDdEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFRCw4Q0FBa0IsR0FBbEI7UUFDRSxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzFCLENBQUM7SUEzRlUsaUJBQWlCO1FBSDdCLGlCQUFVLENBQUM7WUFDVixVQUFVLEVBQUUsTUFBTTtTQUNuQixDQUFDO09BQ1csaUJBQWlCLENBNEY3QjtJQUFELHdCQUFDO0NBQUEsQUE1RkQsSUE0RkM7QUE1RlksOENBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCcmlnaHRuZXNzIH0gZnJvbSAnbmF0aXZlc2NyaXB0LWJyaWdodG5lc3MnO1xyXG5pbXBvcnQgKiBhcyBBcHBsaWNhdGlvbiBmcm9tICd0bnMtY29yZS1tb2R1bGVzL2FwcGxpY2F0aW9uJztcclxuaW1wb3J0IFdpbmRvd01hbmFnZXIgPSBhbmRyb2lkLnZpZXcuV2luZG93TWFuYWdlcjtcclxuaW1wb3J0IFN5c3RlbSA9IGphdmEubGFuZy5TeXN0ZW07XHJcbmltcG9ydCBBbGFybU1hbmFnZXIgPSBhbmRyb2lkLmFwcC5BbGFybU1hbmFnZXI7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBXYWtlRmFjYWRlU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB3YWtlQWN0aXZpdHlJbnRlbnQ6IGFuZHJvaWQuY29udGVudC5JbnRlbnQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBjb250ZXh0ID0gQXBwbGljYXRpb24uYW5kcm9pZFxyXG4gICAgLmNvbnRleHQgYXMgYW5kcm9pZC5jb250ZW50LkNvbnRleHQ7XHJcblxyXG4gIHByaXZhdGUgaXNPbjogYm9vbGVhbjtcclxuICBwcml2YXRlIHdha2VMb2NrOiBhbmRyb2lkLm9zLlBvd2VyTWFuYWdlci5XYWtlTG9jaztcclxuXHJcbiAgd2FrZVNjcmVlbkJ5QWN0aXZpdHkoKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNPbikge1xyXG4gICAgICB0aGlzLndha2VBY3Rpdml0eUludGVudC5zZXRDbGFzc05hbWUoXHJcbiAgICAgICAgQXBwbGljYXRpb24uYW5kcm9pZC5jb250ZXh0LFxyXG4gICAgICAgICdjb20udG5zLkN1c3RvbVdha2luZ0FjdGl2aXR5J1xyXG4gICAgICApO1xyXG4gICAgICB0aGlzLndha2VBY3Rpdml0eUludGVudC5zZXRGbGFncyhcclxuICAgICAgICBhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkZMQUdfQUNUSVZJVFlfU0lOR0xFX1RPUCB8XHJcbiAgICAgICAgYW5kcm9pZC5jb250ZW50LkludGVudC5GTEFHX0FDVElWSVRZX05FV19UQVNLXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMuY29udGV4dC5zdGFydEFjdGl2aXR5KHRoaXMud2FrZUFjdGl2aXR5SW50ZW50KTtcclxuXHJcbiAgICAgIHRoaXMuaXNPbiA9IHRydWU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHNldEFsYXJtKCl7XHJcbiAgICBjb25zdCBhbSA9IEFwcGxpY2F0aW9uLmFuZHJvaWQuY29udGV4dC5nZXRTeXN0ZW1TZXJ2aWNlKFxyXG4gICAgICBhbmRyb2lkLmNvbnRlbnQuQ29udGV4dC5BTEFSTV9TRVJWSUNFXHJcbiAgICApIGFzIGFuZHJvaWQuYXBwLkFsYXJtTWFuYWdlcjtcclxuICAgIGNvbnN0IGludGVudCA9IG5ldyBhbmRyb2lkLmNvbnRlbnQuSW50ZW50KCk7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gQXBwbGljYXRpb24uYW5kcm9pZC5jb250ZXh0O1xyXG4gICAgY29uc3QgcGVuZGluZ0ludGVudCA9IGFuZHJvaWQuYXBwLlBlbmRpbmdJbnRlbnQuZ2V0QWN0aXZpdHkoY29udGV4dCxcclxuICAgICAgMSxcclxuICAgICAgaW50ZW50LFxyXG4gICAgICBhbmRyb2lkLmFwcC5QZW5kaW5nSW50ZW50LkZMQUdfVVBEQVRFX0NVUlJFTlQpO1xyXG5cclxuICAgIGFtLnNldEluZXhhY3RSZXBlYXRpbmcoQWxhcm1NYW5hZ2VyLlJUQ19XQUtFVVAsIFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpLCA1ICogNjAgKiAxMDAwLCBwZW5kaW5nSW50ZW50KTtcclxuICAgIGNvbnNvbGUubG9nKFwiSWR6aWUgaW50ZW50IFBlbmRpbmcgIDopXCIgKyBhbS5nZXROZXh0QWxhcm1DbG9jaygpKTtcclxuICAgIHRoaXMud2FrZVNjcmVlbkJ5Q2FsbCgpO1xyXG5cclxuICB9XHJcbiAgY2FuY2VsQWxhcm0oKXtcclxuICAgIGNvbnN0IGFtID0gQXBwbGljYXRpb24uYW5kcm9pZC5jb250ZXh0LmdldFN5c3RlbVNlcnZpY2UoXHJcbiAgICAgIGFuZHJvaWQuY29udGVudC5Db250ZXh0LkFMQVJNX1NFUlZJQ0VcclxuICAgICkgYXMgYW5kcm9pZC5hcHAuQWxhcm1NYW5hZ2VyO1xyXG4gICAgY29uc3QgaW50ZW50ID0gbmV3IGFuZHJvaWQuY29udGVudC5JbnRlbnQoKTtcclxuICAgIGNvbnN0IGNvbnRleHQgPSBBcHBsaWNhdGlvbi5hbmRyb2lkLmNvbnRleHQ7XHJcbiAgICBjb25zdCBwZW5kaW5nSW50ZW50ID0gYW5kcm9pZC5hcHAuUGVuZGluZ0ludGVudC5nZXRBY3Rpdml0eShjb250ZXh0LFxyXG4gICAgICAxLFxyXG4gICAgICBpbnRlbnQsXHJcbiAgICAgIGFuZHJvaWQuYXBwLlBlbmRpbmdJbnRlbnQuRkxBR19VUERBVEVfQ1VSUkVOVCk7XHJcbiAgICBhbS5jYW5jZWwocGVuZGluZ0ludGVudCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIld5bGFjem9ueSBhbGFybVwiKTtcclxuICAgIC8vdGhpcy5zbm9vemVTY3JlZW5CeUNhbGwoKTtcclxuICB9XHJcblxyXG4gIHNub296ZUFjdGl2aXR5U2NyZWVuKCkge1xyXG4gICAgaWYgKHRoaXMuaXNPbikge1xyXG4gICAgICB0aGlzLndha2VBY3Rpdml0eUludGVudCA9IG5ldyBhbmRyb2lkLmNvbnRlbnQuSW50ZW50KCk7XHJcbiAgICAgIHRoaXMud2FrZUFjdGl2aXR5SW50ZW50LnNldENsYXNzTmFtZShcclxuICAgICAgICBBcHBsaWNhdGlvbi5hbmRyb2lkLmNvbnRleHQsXHJcbiAgICAgICAgJ2NvbS50bnMuQ3VzdG9tV2FraW5nQWN0aXZpdHknXHJcbiAgICAgICk7XHJcbiAgICAgIHRoaXMud2FrZUFjdGl2aXR5SW50ZW50LnNldEZsYWdzKFxyXG4gICAgICAgIGFuZHJvaWQuY29udGVudC5JbnRlbnQuRkxBR19BQ1RJVklUWV9TSU5HTEVfVE9QIHxcclxuICAgICAgICBhbmRyb2lkLmNvbnRlbnQuSW50ZW50LkZMQUdfQUNUSVZJVFlfTkVXX1RBU0tcclxuICAgICAgKTtcclxuICAgICAgdGhpcy53YWtlQWN0aXZpdHlJbnRlbnQucHV0RXh0cmEoJ2ZpbmlzaCcsIHRydWUpO1xyXG4gICAgICB0aGlzLmNvbnRleHQuc3RhcnRBY3Rpdml0eSh0aGlzLndha2VBY3Rpdml0eUludGVudCk7XHJcblxyXG4gICAgICB0aGlzLmlzT24gPSBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICB9XHJcblxyXG4gIHdha2VTY3JlZW5CeUNhbGwoKSB7XHJcbiAgICBjb25zdCBwb3dlck1hbmFnZXIgPSBBcHBsaWNhdGlvbi5hbmRyb2lkLmNvbnRleHQuZ2V0U3lzdGVtU2VydmljZShcclxuICAgICAgYW5kcm9pZC5jb250ZW50LkNvbnRleHQuUE9XRVJfU0VSVklDRVxyXG4gICAgKSBhcyBhbmRyb2lkLm9zLlBvd2VyTWFuYWdlcjtcclxuXHJcbiAgICB0aGlzLndha2VMb2NrID0gcG93ZXJNYW5hZ2VyLm5ld1dha2VMb2NrKFxyXG4gICAgICBhbmRyb2lkLm9zLlBvd2VyTWFuYWdlci5QQVJUSUFMX1dBS0VfTE9DSyB8XHJcbiAgICAgIGFuZHJvaWQub3MuUG93ZXJNYW5hZ2VyLkFDUVVJUkVfQ0FVU0VTX1dBS0VVUCB8XHJcbiAgICAgIGFuZHJvaWQub3MuUG93ZXJNYW5hZ2VyLk9OX0FGVEVSX1JFTEVBU0UsXHJcbiAgICAgICdjb20udG5zLndha2UtZmFjYWRlJ1xyXG4gICAgKSBhcyBhbmRyb2lkLm9zLlBvd2VyTWFuYWdlci5XYWtlTG9jaztcclxuICAgIHRoaXMud2FrZUxvY2suYWNxdWlyZSgpO1xyXG4gICAgY29uc3Qgd2luZG93ID0gQXBwbGljYXRpb24uYW5kcm9pZC5mb3JlZ3JvdW5kQWN0aXZpdHk7XHJcbiAgICBjb25zb2xlLmxvZygndWRhbG8gc2llIHdsYWN6eWMgcHJvY2Vzb3InKTtcclxuICB9XHJcblxyXG4gIHNub296ZVNjcmVlbkJ5Q2FsbCgpIHtcclxuICAgIHRoaXMud2FrZUxvY2sucmVsZWFzZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=